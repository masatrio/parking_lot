// Code generated by MockGen. DO NOT EDIT.
// Source: types.go

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	slot "github.com/masatrio/parking_lot/parkinglot/slot"
	vehicle "github.com/masatrio/parking_lot/vehicle"
	reflect "reflect"
)

// MockSlot is a mock of Slot interface
type MockSlot struct {
	ctrl     *gomock.Controller
	recorder *MockSlotMockRecorder
}

// MockSlotMockRecorder is the mock recorder for MockSlot
type MockSlotMockRecorder struct {
	mock *MockSlot
}

// NewMockSlot creates a new mock instance
func NewMockSlot(ctrl *gomock.Controller) *MockSlot {
	mock := &MockSlot{ctrl: ctrl}
	mock.recorder = &MockSlotMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockSlot) EXPECT() *MockSlotMockRecorder {
	return m.recorder
}

// GetID mocks base method
func (m *MockSlot) GetID() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetID")
	ret0, _ := ret[0].(int)
	return ret0
}

// GetID indicates an expected call of GetID
func (mr *MockSlotMockRecorder) GetID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetID", reflect.TypeOf((*MockSlot)(nil).GetID))
}

// GetVehicle mocks base method
func (m *MockSlot) GetVehicle() vehicle.Vehicle {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVehicle")
	ret0, _ := ret[0].(vehicle.Vehicle)
	return ret0
}

// GetVehicle indicates an expected call of GetVehicle
func (mr *MockSlotMockRecorder) GetVehicle() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVehicle", reflect.TypeOf((*MockSlot)(nil).GetVehicle))
}

// Fill mocks base method
func (m *MockSlot) Fill(arg0 vehicle.Vehicle) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Fill", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Fill indicates an expected call of Fill
func (mr *MockSlotMockRecorder) Fill(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Fill", reflect.TypeOf((*MockSlot)(nil).Fill), arg0)
}

// Empty mocks base method
func (m *MockSlot) Empty() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Empty")
	ret0, _ := ret[0].(error)
	return ret0
}

// Empty indicates an expected call of Empty
func (mr *MockSlotMockRecorder) Empty() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Empty", reflect.TypeOf((*MockSlot)(nil).Empty))
}

// IsEmpty mocks base method
func (m *MockSlot) IsEmpty() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsEmpty")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsEmpty indicates an expected call of IsEmpty
func (mr *MockSlotMockRecorder) IsEmpty() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsEmpty", reflect.TypeOf((*MockSlot)(nil).IsEmpty))
}

// MockSlotManager is a mock of SlotManager interface
type MockSlotManager struct {
	ctrl     *gomock.Controller
	recorder *MockSlotManagerMockRecorder
}

// MockSlotManagerMockRecorder is the mock recorder for MockSlotManager
type MockSlotManagerMockRecorder struct {
	mock *MockSlotManager
}

// NewMockSlotManager creates a new mock instance
func NewMockSlotManager(ctrl *gomock.Controller) *MockSlotManager {
	mock := &MockSlotManager{ctrl: ctrl}
	mock.recorder = &MockSlotManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockSlotManager) EXPECT() *MockSlotManagerMockRecorder {
	return m.recorder
}

// GetSize mocks base method
func (m *MockSlotManager) GetSize() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSize")
	ret0, _ := ret[0].(int)
	return ret0
}

// GetSize indicates an expected call of GetSize
func (mr *MockSlotManagerMockRecorder) GetSize() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSize", reflect.TypeOf((*MockSlotManager)(nil).GetSize))
}

// GetAll mocks base method
func (m *MockSlotManager) GetAll() []slot.Slot {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll")
	ret0, _ := ret[0].([]slot.Slot)
	return ret0
}

// GetAll indicates an expected call of GetAll
func (mr *MockSlotManagerMockRecorder) GetAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockSlotManager)(nil).GetAll))
}

// GetFirstEmptySlot mocks base method
func (m *MockSlotManager) GetFirstEmptySlot() (slot.Slot, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFirstEmptySlot")
	ret0, _ := ret[0].(slot.Slot)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFirstEmptySlot indicates an expected call of GetFirstEmptySlot
func (mr *MockSlotManagerMockRecorder) GetFirstEmptySlot() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFirstEmptySlot", reflect.TypeOf((*MockSlotManager)(nil).GetFirstEmptySlot))
}

// Inc mocks base method
func (m *MockSlotManager) Inc() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Inc")
}

// Inc indicates an expected call of Inc
func (mr *MockSlotManagerMockRecorder) Inc() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Inc", reflect.TypeOf((*MockSlotManager)(nil).Inc))
}

// Dec mocks base method
func (m *MockSlotManager) Dec() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Dec")
}

// Dec indicates an expected call of Dec
func (mr *MockSlotManagerMockRecorder) Dec() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Dec", reflect.TypeOf((*MockSlotManager)(nil).Dec))
}

// IsFull mocks base method
func (m *MockSlotManager) IsFull() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsFull")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsFull indicates an expected call of IsFull
func (mr *MockSlotManagerMockRecorder) IsFull() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsFull", reflect.TypeOf((*MockSlotManager)(nil).IsFull))
}
